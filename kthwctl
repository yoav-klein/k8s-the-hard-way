#!/bin/bash

#!/bin/bash

[ ! -f ./.env ] && { echo "run configure.sh first"; exit 1; }

source ./lib
source ./.env
source $LOG_LIB

export LOG_LEVEL=warning

preflight_checks() {
    # verify data.json
    echo "kuku"
}

pushd() {
    command pushd "$@" > /dev/null 2>&1
}

popd() {
    command popd "$@" > /dev/null 2>&1
}

_print_action() {
    echo -e "\e[34;1m$1\e[0m"

}

_perform_action() {
    manager=$1
    cmd=$2
    msg=$3

    _print_action "$msg"
    HUMAN=false $manager $cmd &
    local action_pid=$!

    while ps -p $action_pid > /dev/null; do
        printf "."
        sleep 1
    done
    printf "\n"
    wait $action_pid || { print_error "failed $msg"; return 1; }
    
}

bootstrap_etcd() {
    pushd $ETCD_DIR
    _perform_action "./etcd_manager.sh" "build" "generating deployment files" || return 1;
    _perform_action "./etcd_manager.sh" "distribute" "distributing files to nodes" || return 1;
    _perform_action "./etcd_manager.sh" "install_binaries" "installing etcd binaries on nodes" || return 1;
    _perform_action "./etcd_manager.sh" "install_service" "installing etcd service on nodes" || return 1;
    _perform_action "./etcd_manager.sh" "start" "starting service" || return 1;
    
    HUMAN=false ./etcd_manager.sh test || { print_error "etcd test failed !"; return 1; }
    popd

}

bootstrap_control_plane() {
    pushd $CP_DIR
    _perform_action "./cp_manager.sh" "build" "generating deployment files" || return 1;
    _perform_action "./cp_manager.sh" "distribute" "distributing files to nodes" || return 1;
    _perform_action "./cp_manager.sh" "install_binaries" "installing control plane binaries on nodes" || return 1;
    _perform_action "./cp_manager.sh" "install_services" "installing control plane services on nodes" || return 1;
    _perform_action "./cp_manager.sh" "start" "starting services" || return 1;
    
    HUMAN=false ./cp_manager.sh test || { print_error "control plane test failed !"; return 1; }
    popd

}

bootstrap_workers() {
    pushd $WORKERS_DIR
    _perform_action "./workers_manager.sh" "build" "generating deployment files" || return 1;
    _perform_action "./workers_manager.sh" "distribute" "distributing files to nodes" || return 1;
    _perform_action "./workers_manager.sh" "install_prerequisites" "installing prerequisites on  nodes" || return 1;
    _perform_action "./workers_manager.sh" "install_binaries" "installing worker binaries on nodes" || return 1;
    _perform_action "./workers_manager.sh" "install_services" "installing worker services on nodes" || return 1;
    _perform_action "./workers_manager.sh" "start" "starting services" || return 1;
    sleep 10
    HUMAN=false ./workers_manager.sh test || { print_error "workers test failed !"; return 1; }
    popd

}


configure_networking_and_dns() {
    pushd ${NETWORKING_DIR}
    ./networking.sh weavenet > $LOG_FILE 2>&1 || { print_error "failed to setup networking plugin, see $LOG_FILE"; return 1; }
    ./networking.sh coredns > $LOG_FILE 2>&1 || { print_error "failed to setup CoreDNS, see $LOG_FILE"; return 1; }
    sleep 5  # give some time
    ./networking.sh test_networking > $LOG_FILE 2>&1 || { print_error "networking test failed, see $LOG_FILE"; return 1;  } 
    ./networking.sh test_dns > $LOG_FILE 2>&1 || { print_error "DNS test failed, see $LOG_FILE"; return 1; }
    popd
}

reset_workers() {
    local sc=0
     pushd $WORKERS_DIR
    ./workers_manager.sh stop || { print_error "failed to stop workers"; sc=1; }
    ./workers_manager.sh uninstall_services ||{ print_error "failed to uninstall workers services"; sc=1; }
    ./workers_manager.sh uninstall_binaries ||{ print_error "failed to unisntall workers binaries"; sc=1; }
    ./workers_manager.sh uninstall_prerequisites || { print_error "failed to uninstall workers prerequisites"; sc=1; }
    ./workers_manager.sh clean_nodes || { print_error "failed to clean worker nodes"; sc=1; }
    popd
    return $sc
    
}

reset_control_plane() {
    local sc=0
    pushd $CP_DIR
    ./cp_manager.sh stop || { print_error "failed to stop conrtol plane"; sc=1; }
    ./cp_manager.sh uninstall_services || { print_error "failed to uninstall control plane services"; sc=1; }
    ./cp_manager.sh uninstall_binaries || { print_error "failed to unisntall control plane binaries"; sc=1; }
    ./cp_manager.sh clean_nodes || { print_error "failed to clean control plane nodes"; sc=1; }
    popd
    return $sc
}

reset_etcd() {
    local sc=0
    pushd $ETCD_DIR
    ./etcd_manager.sh stop || { print_error "failed to stop etcd"; sc=1; }
    ./etcd_manager.sh uninstall_service || { print_error "failed to uninstall etcd services"; sc=1; }
    ./etcd_manager.sh uninstall_binaries || { print_error "failed to unisntall etcd binaries"; sc=1; }
    ./etcd_manager.sh clean_nodes || { print_error "failed to clean etcd from nodes"; sc=1; }
    popd
    return $sc
}

bootstrap() {
    preflight_checks
    # certificates
    print_title "1. generating certificates"
    pushd $CERTIFICATES_DIR
    make || { print_error "failed generating certificates"; exit 1; }
    popd
    print_success "SUCCESS"
    
    # kubeconfigs
    print_title "2. generating kubeconfigs"
    pushd $KUBECONFIGS_DIR
    make || { print_error "failed generating kubeconfigs"; exit 1; }
    popd
    print_success "SUCEESS"

    # etcd
    print_title "3. bootstrapping etcd"
    bootstrap_etcd || { print_error "failed bootstrapping etcd cluster"; exit 1; }
    print_success "SUCCESS"

    # control plane
    print_title "4. bootstraping control plane"
    bootstrap_control_plane || { print_error "failed bootsrapping control plane"; exit 1;  }
    print_success "SUCCESS"

    # workers   
    print_title "5. bootstrapping worker nodes"
    bootstrap_workers || { print_error "failed bootstrapping worker nodes"; exit 1;  }
    print_success "SUCCESS"
    
    # networking
    print_title "6. configuring networking and DNS"
    configure_networking_and_dns || { print_error "failed configuring netwokring and DNS"; exit 1; } 
    print_success "SUCCESS"
    big_success "CLUSTER IS UP AND RUNNING"

}

reset() {
    # clean all reousrces in the cluster
    print_title "resetting workers"
    reset_workers && print_success "resetting workers succeed"
    
    print_title "resetting control plane"
    reset_control_plane && print_success "resetting control plane succeed"

    print_title "resetting etcd"
    reset_etcd && print_success "resetting etcd succeed"
}


status() {
    echo "status: currently unavailable"
}

cmd=$1


usage() {
    echo "kthwctl <command>"
    echo ""
    echo "commands:"
    echo "bootstrap  - bootstrap the cluster"
    echo "reset      - delete everything, leaving no mark of the cluster"
    echo "status     - get the status of the cluster"
}

case $cmd in
    bootstrap) bootstrap;;
    reset) reset;;
    status) status;;
    *) usage;;
esac

